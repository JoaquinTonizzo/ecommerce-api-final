<script>
  document.title = 'Administrar productos | Ecommerce';
</script>
<link rel="stylesheet" href="/css/realTimeProducts.css">
<link rel="stylesheet" href="/css/realTimeProducts-modal-fields.css">
<main class="rtp-main" style="background:#181818; border-radius:14px; padding:18px 0 18px 0; box-shadow:0 2px 16px #0006;">
  <h2 class="rtp-title" style="color:#ffd600; text-align:center; margin-bottom:18px; letter-spacing:0.5px; font-size:1.45em;">Productos en tiempo real</h2>
  <div style="display:flex; gap:12px; margin-bottom:18px; flex-wrap:wrap; justify-content:center;">
    <button id="toggle-form-btn" class="form-btn" style="background:#ffd600; color:#181818; border-radius:8px; font-weight:600; font-size:1.07em; padding:10px 22px; box-shadow:0 1px 6px rgba(0,0,0,0.08); transition:background 0.18s, color 0.18s, box-shadow 0.18s; letter-spacing:0.2px;">Agregar nuevo producto</button>
  </div>
  <ul id="products-list"></ul>
  <div id="pagination" style="display:flex; justify-content:center; gap:12px; margin:18px 0;"></div>
  <!-- Modal para agregar producto -->
  <div id="add-modal" style="display:none; position:fixed; top:0; left:0; width:100vw; height:100vh; background:rgba(0,0,0,0.45); align-items:center; justify-content:center; z-index:9999;">
  <div style="background:#232323; color:#fff; padding:16px 12px 12px 12px; border-radius:14px; min-width:260px; max-width:400px; box-shadow:0 4px 32px #0008; position:relative; border:1.5px solid #ffd600; font-size:0.7em;">
  <button id="close-add-modal" style="position:absolute; top:4px; right:8px; background:none; border:none; font-size:1.2em; color:#ffd600; cursor:pointer;">&times;</button>
  <h3 style="margin-bottom:10px; color:#ffd600; font-size:1.08em;">Agregar producto</h3>
  <form id="add-product-form" class="product-form" style="font-size:0.97em;">
  <div class="form-row" style="margin-bottom:7px;"><label for="title" style="font-size:0.97em; margin-bottom:2px;">Título</label><input type="text" name="title" id="title" placeholder="Título" autocomplete="off" required /></div>
  <div class="form-row" style="margin-bottom:7px;"><label for="description" style="font-size:0.97em; margin-bottom:2px;">Descripción</label><input type="text" name="description" id="description" placeholder="Descripción" autocomplete="off" required /></div>
  <div class="form-row" style="margin-bottom:7px;"><label for="code" style="font-size:0.97em; margin-bottom:2px;">Código</label><input type="text" name="code" id="code" placeholder="Código" autocomplete="off" required /></div>
  <div class="form-row" style="margin-bottom:7px;"><label for="price" style="font-size:0.97em; margin-bottom:2px;">Precio</label><input type="number" name="price" id="price" placeholder="Precio" autocomplete="off" required min="1" /></div>
  <div class="form-row" style="margin-bottom:7px;"><label for="stock" style="font-size:0.97em; margin-bottom:2px;">Stock</label><input type="number" name="stock" id="stock" placeholder="Stock" autocomplete="off" required min="0" /></div>
  <div class="form-row" style="margin-bottom:7px;"><label for="category" style="font-size:0.97em; margin-bottom:2px;">Categoría</label><input type="text" name="category" id="category" placeholder="Categoría" autocomplete="off" required /></div>
  <div class="form-row" style="margin-bottom:7px;"><label for="thumbnail" style="font-size:0.97em; margin-bottom:2px;">URL de imagen</label><input type="url" name="thumbnail" id="thumbnail" placeholder="URL de imagen" autocomplete="off" required /></div>
  <div class="form-row" style="margin-bottom:7px;"><label for="status" style="font-size:0.97em; margin-bottom:2px;">Activo</label><input type="checkbox" name="status" id="status" checked /></div>
  <button type="submit" class="form-btn" style="background:#ffd600; color:#181818; border-radius:8px; font-weight:600; font-size:1.07em; padding:10px 22px; box-shadow:0 1px 6px rgba(0,0,0,0.08); transition:background 0.18s, color 0.18s, box-shadow 0.18s; letter-spacing:0.2px;">Agregar producto</button>
        <div id="form-error" style="color:#d00; margin-top:8px; display:none;"></div>
      </form>
    </div>
  </div>
</main>
<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
<script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="/socket.io/socket.io.js"></script>
<script>
  // Modal para agregar producto
  const toggleBtn = document.getElementById('toggle-form-btn');
  const addModal = document.getElementById('add-modal');
  const closeAddModal = document.getElementById('close-add-modal');
  toggleBtn.addEventListener('click', () => {
    addModal.style.display = 'flex';
  });
  closeAddModal.addEventListener('click', () => {
    addModal.style.display = 'none';
  });
  // Cerrar modal al hacer click fuera del contenido
  addModal.addEventListener('click', (e) => {
    if (e.target === addModal) addModal.style.display = 'none';
  });
  const socket = io();

  // Paginación real desde backend
  const list = document.getElementById('products-list');
  const pagination = document.getElementById('pagination');
  let currentPage = 1;
  const pageSize = 10;

  function requestPage(page) {
    socket.emit('getProductsPage', { page, limit: pageSize });
  }

  function renderProducts(products) {
    list.innerHTML = '';
    if (!products.length) {
      const msg = document.createElement('div');
      msg.textContent = 'No hay productos.';
      msg.style.color = '#ffd600';
      msg.style.textAlign = 'left';
      msg.style.fontSize = '1.15em';
      msg.style.margin = '32px';
      list.appendChild(msg);
      return;
    }
    products.forEach(p => {
      const li = document.createElement('li');
      li.setAttribute('data-id', p._id || p.id);
      li.className = 'product-item';
      let imgHtml = '';
      if (p.thumbnails && p.thumbnails[0]) {
        imgHtml = `<img src="${p.thumbnails[0]}" alt="Imagen" class="product-img">`;
      } else {
        imgHtml = `<div class="product-img no-img" aria-label="Sin Imagen" title="Sin Imagen"></div>`;
      }
      li.innerHTML = `
        <div class="product-img-wrapper">${imgHtml}</div>
        <div class="product-info">
          <strong class="product-title">${p.title}</strong>
          <span class="product-desc"><b>Descripción:</b> ${p.description || ''}</span>
          <span class="product-code"><b>Código:</b> ${p.code || ''}</span>
          <span class="product-price"><b>Precio:</b> $${p.price}</span>
          <span class="product-stock"><b>Stock:</b> ${p.stock}</span>
          <span class="product-category"><b>Categoría:</b> ${p.category || ''}</span>
          <span class="product-status"><b>Status:</b> ${p.status ? 'Activo' : 'Inactivo'}</span>
          <div style="display:flex; gap:8px; margin-top:12px; justify-content:center;">
            <button onclick="editProduct('${p._id || p.id}')" class="form-btn" style="background:#ffc107; color:#222;">Editar</button>
            <button onclick="deleteProduct('${p._id || p.id}')" class="delete-btn">Eliminar</button>
            <button onclick="toggleStatusProduct('${p._id || p.id}', ${p.status})" class="form-btn" style="background:#6c757d; color:#fff;">
              ${p.status ? 'Deshabilitar' : 'Habilitar'}
            </button>
          </div>
        </div>
      `;
      list.appendChild(li);
    });
  }

  function renderPagination(page, totalPages) {
    pagination.innerHTML = '';
    if (totalPages <= 1) return;
    if (page > 1) {
      const prevBtn = document.createElement('button');
      prevBtn.textContent = 'Anterior';
      prevBtn.className = 'form-btn';
      prevBtn.onclick = () => { currentPage--; requestPage(currentPage); };
      pagination.appendChild(prevBtn);
    }
    for (let i = 1; i <= totalPages; i++) {
      const pageBtn = document.createElement('button');
      pageBtn.textContent = i;
      pageBtn.className = 'form-btn';
      if (i === page) pageBtn.style.background = '#007bff';
      pageBtn.onclick = () => { currentPage = i; requestPage(currentPage); };
      pagination.appendChild(pageBtn);
    }
    if (page < totalPages) {
      const nextBtn = document.createElement('button');
      nextBtn.textContent = 'Siguiente';
      nextBtn.className = 'form-btn';
      nextBtn.onclick = () => { currentPage++; requestPage(currentPage); };
      pagination.appendChild(nextBtn);
    }
  }

  // Recibir página de productos desde el backend
  socket.on('productsPage', ({ products, page, totalPages }) => {
    currentPage = page;
    renderProducts(products);
    renderPagination(page, totalPages);
  });

  // Cuando se agrega/borra/edita un producto, refrescar la página actual
  socket.on('refreshProductsPage', () => {
    requestPage(currentPage);
  });

  // Al cargar, pedir la primera página
  requestPage(1);

  // Emitir evento para agregar producto
  document.getElementById('add-product-form').addEventListener('submit', function(e) {
    e.preventDefault();
    const errorDiv = document.getElementById('form-error');
    errorDiv.style.display = 'none';
    let errorMsg = '';
    const title = this.title.value.trim();
    const description = this.description.value.trim();
    const code = this.code.value.trim();
    const price = parseFloat(this.price.value);
    const stock = parseInt(this.stock.value);
    const category = this.category.value.trim();
    const thumbnail = this.thumbnail.value.trim();
    const status = this.status.checked;
    // Validaciones extra JS
    if (title.length < 3 || title.length > 50) errorMsg = 'El título debe tener entre 3 y 50 caracteres.';
    else if (description.length < 5) errorMsg = 'La descripción debe tener al menos 5 caracteres.';
    else if (!/^[A-Za-z0-9_-]{3,20}$/.test(code)) errorMsg = 'El código debe tener entre 3 y 20 caracteres alfanuméricos.';
    else if (isNaN(price) || price < 1) errorMsg = 'El precio debe ser mayor a 0.';
    else if (isNaN(stock) || stock < 0) errorMsg = 'El stock no puede ser negativo.';
    else if (category.length < 3 || category.length > 30) errorMsg = 'La categoría debe tener entre 3 y 30 caracteres.';
    else if (!/^https?:\/\/.+\..+/.test(thumbnail)) errorMsg = 'La URL de imagen debe ser válida.';
    if (errorMsg) {
      Toastify({ text: errorMsg, duration: 3500, gravity: 'top', position: 'right', backgroundColor: '#dc3545' }).showToast();
      return;
    }
    const thumbnails = [thumbnail];
    socket.emit('addProduct', {
      title,
      description,
      code,
      price,
      status,
      stock,
      category,
      thumbnails
    });
    Toastify({ text: 'Producto agregado correctamente', duration: 2500, gravity: 'top', position: 'right', backgroundColor: '#28a745' }).showToast();
    this.reset();
    addModal.style.display = 'none';
  });

  // Emitir evento para eliminar producto
  window.deleteProduct = function(id) {
    Swal.fire({
      title: '¿Estás seguro?',
      text: 'Esta acción eliminará el producto de forma permanente.',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#dc3545',
      cancelButtonColor: '#6c757d',
      confirmButtonText: 'Sí, eliminar',
      cancelButtonText: 'Cancelar'
    }).then((result) => {
      if (result.isConfirmed) {
        socket.emit('deleteProduct', id);
        Swal.fire({
          title: 'Eliminado',
          text: 'El producto fue eliminado correctamente.',
          icon: 'success',
          timer: 1800,
          showConfirmButton: false
        });
      }
    });
  };

  // Cambiar status (habilitar/deshabilitar)
  window.toggleStatusProduct = function(id, currentStatus) {
    // Forzar booleano real
    const newStatus = currentStatus === true || currentStatus === 'true';
    fetch(`/api/products/${id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ status: !newStatus })
    })
      .then(r => r.json())
      .then(resp => {
        if (!resp.error) {
          socket.emit('updateProduct', id);
          Swal.fire({
            title: !newStatus ? 'Producto habilitado' : 'Producto deshabilitado',
            icon: 'success',
            timer: 1500,
            showConfirmButton: false
          });
        } else {
          Swal.fire({
            title: 'Error',
            text: 'Error al actualizar el estado: ' + resp.error,
            icon: 'error',
            timer: 2500,
            showConfirmButton: false
          });
        }
      });
  };

  // Modal de edición de producto
  let editModal = null;
  function createEditModal() {
    if (editModal) return editModal;
    editModal = document.createElement('div');
    editModal.id = 'edit-modal';
    editModal.style.position = 'fixed';
    editModal.style.top = '0';
    editModal.style.left = '0';
    editModal.style.width = '100vw';
    editModal.style.height = '100vh';
    editModal.style.background = 'rgba(0,0,0,0.35)';
    editModal.style.display = 'flex';
    editModal.style.alignItems = 'center';
    editModal.style.justifyContent = 'center';
    editModal.style.zIndex = '9999';
    editModal.innerHTML = `
  <div style="background:#232323; color:#fff; padding:16px 12px 12px 12px; border-radius:14px; min-width:260px; max-width:400px; box-shadow:0 4px 32px #0008; position:relative; border:1.5px solid #ffd600; font-size:0.7em;">
  <button id="close-edit-modal" style="position:absolute; top:4px; right:8px; background:none; border:none; font-size:1.2em; color:#ffd600; cursor:pointer;">&times;</button>
  <h3 style="margin-bottom:10px; color:#ffd600; font-size:1.08em;">Editar producto</h3>
  <form id="edit-product-form" style="font-size:0.97em;">
          <div class="form-row" style="margin-bottom:7px;"><label for="edit-title" style="font-size:0.97em; margin-bottom:2px;">Título</label><input type="text" id="edit-title" name="title" required /></div>
          <div class="form-row" style="margin-bottom:7px;"><label for="edit-description" style="font-size:0.97em; margin-bottom:2px;">Descripción</label><input type="text" id="edit-description" name="description" required /></div>
          <div class="form-row" style="margin-bottom:7px;"><label for="edit-code" style="font-size:0.97em; margin-bottom:2px;">Código</label><input type="text" id="edit-code" name="code" required /></div>
          <div class="form-row" style="margin-bottom:7px;"><label for="edit-price" style="font-size:0.97em; margin-bottom:2px;">Precio</label><input type="number" id="edit-price" name="price" required min="1" /></div>
          <div class="form-row" style="margin-bottom:7px;"><label for="edit-stock" style="font-size:0.97em; margin-bottom:2px;">Stock</label><input type="number" id="edit-stock" name="stock" required min="0" /></div>
          <div class="form-row" style="margin-bottom:7px;"><label for="edit-category" style="font-size:0.97em; margin-bottom:2px;">Categoría</label><input type="text" id="edit-category" name="category" required /></div>
          <div class="form-row" style="margin-bottom:7px;"><label for="edit-thumbnail" style="font-size:0.97em; margin-bottom:2px;">URL de imagen</label><input type="url" id="edit-thumbnail" name="thumbnail" required /></div>
          <div class="form-row" style="margin-bottom:7px;"><label for="edit-status" style="font-size:0.97em; margin-bottom:2px;">Activo</label><input type="checkbox" id="edit-status" name="status" /></div>
          <button type="submit" class="form-btn" style="margin-top:12px;">Guardar cambios</button>
          <div id="edit-form-error" style="color:#d00; margin-top:8px; display:none;"></div>
        </form>
      </div>
    `;
    document.body.appendChild(editModal);
    editModal.querySelector('#close-edit-modal').onclick = () => { editModal.style.display = 'none'; };
      // Cerrar modal al hacer click fuera del contenido
      editModal.addEventListener('click', (e) => {
        if (e.target === editModal) editModal.style.display = 'none';
      });
    return editModal;
  }

  window.editProduct = function(id) {
    // Obtener datos actuales del producto (de la página actual)
    const li = document.querySelector(`li[data-id="${id}"]`);
    if (!li) return Toastify({ text: 'No se encontró el producto.', duration: 2500, backgroundColor: '#dc3545' }).showToast();
    const title = li.querySelector('.product-title').textContent;
    const description = li.querySelector('.product-desc').textContent.replace('Descripción:', '').trim();
    const code = li.querySelector('.product-code').textContent.replace('Código:', '').trim();
    const price = li.querySelector('.product-price').textContent.replace('Precio:', '').replace('$','').trim();
    const stock = li.querySelector('.product-stock').textContent.replace('Stock:', '').trim();
    const category = li.querySelector('.product-category').textContent.replace('Categoría:', '').trim();
    const status = li.querySelector('.product-status').textContent.includes('Activo');
    const img = li.querySelector('.product-img');
    const thumbnail = img ? img.src : '';

    const modal = createEditModal();
    modal.style.display = 'flex';
    // Rellenar el formulario
    modal.querySelector('#edit-title').value = title;
    modal.querySelector('#edit-description').value = description;
    modal.querySelector('#edit-code').value = code;
    modal.querySelector('#edit-price').value = price;
    modal.querySelector('#edit-stock').value = stock;
    modal.querySelector('#edit-category').value = category;
    modal.querySelector('#edit-thumbnail').value = thumbnail;
    modal.querySelector('#edit-status').checked = status;
    modal.querySelector('#edit-form-error').style.display = 'none';

    // Manejar submit
    modal.querySelector('#edit-product-form').onsubmit = function(e) {
      e.preventDefault();
      const errorDiv = modal.querySelector('#edit-form-error');
      errorDiv.style.display = 'none';
      let errorMsg = '';
      const newTitle = modal.querySelector('#edit-title').value.trim();
      const newDescription = modal.querySelector('#edit-description').value.trim();
      const newCode = modal.querySelector('#edit-code').value.trim();
      const newPrice = parseFloat(modal.querySelector('#edit-price').value);
      const newStock = parseInt(modal.querySelector('#edit-stock').value);
      const newCategory = modal.querySelector('#edit-category').value.trim();
      const newThumbnail = modal.querySelector('#edit-thumbnail').value.trim();
      const newStatus = modal.querySelector('#edit-status').checked;
      if (newTitle.length < 3 || newTitle.length > 50) errorMsg = 'El título debe tener entre 3 y 50 caracteres.';
  else if (newDescription.length < 5) errorMsg = 'La descripción debe tener al menos 5 caracteres.';
      else if (!/^[A-Za-z0-9_-]{3,20}$/.test(newCode)) errorMsg = 'El código debe tener entre 3 y 20 caracteres alfanuméricos.';
      else if (isNaN(newPrice) || newPrice < 1) errorMsg = 'El precio debe ser mayor a 0.';
      else if (isNaN(newStock) || newStock < 0) errorMsg = 'El stock no puede ser negativo.';
      else if (newCategory.length < 3 || newCategory.length > 30) errorMsg = 'La categoría debe tener entre 3 y 30 caracteres.';
      else if (!/^https?:\/\/.+\..+/.test(newThumbnail)) errorMsg = 'La URL de imagen debe ser válida.';
      if (errorMsg) {
        errorDiv.textContent = errorMsg;
        errorDiv.style.display = 'block';
        return;
      }
      // Actualizar producto vía API
      fetch(`/api/products/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          title: newTitle,
          description: newDescription,
          code: newCode,
          price: newPrice,
          stock: newStock,
          category: newCategory,
          thumbnails: [newThumbnail],
          status: newStatus
        })
      })
        .then(r => r.json())
        .then(resp => {
          if (!resp.error) {
            Toastify({ text: 'Producto actualizado correctamente', duration: 2500, backgroundColor: '#28a745' }).showToast();
            modal.style.display = 'none';
            socket.emit('updateProduct', id);
          } else {
            errorDiv.textContent = resp.error || 'Error al actualizar el producto';
            errorDiv.style.display = 'block';
          }
        })
        .catch(() => {
          errorDiv.textContent = 'Error de red al actualizar el producto';
          errorDiv.style.display = 'block';
        });
    };
  };
</script>
